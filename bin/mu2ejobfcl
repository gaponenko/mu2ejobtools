#!/usr/bin/perl -w
#
# A.Gaponenko, 2023
#

use strict;
use warnings;
no warnings 'portable'; # otherwise complaints about exceeding 32-bit integers

use Getopt::Long;
use File::Basename;

use Mu2eFilename;
use Mu2eDSName;

use lib dirname($0) . '/../perllib/';
use mu2ejobtools;
use Mu2eInSpecs;
use Mu2eJobPars;

use Data::Dumper; # for debugging


my $sp = Mu2eInSpecs->new;
$sp->disable_protocol(proto_ifdh);

#================================================================
sub format_filenames($$) {
    my ($sp, $list) = @_;

    my @res;

    foreach my $i (@$list) {
        my $apn = $sp->abspathname($i);
        my $dsn = Mu2eFilename->parse($i)->dataset->dsname;
        my $proto = $sp->protocol($dsn);
        if($proto eq proto_file) {
            push @res, $apn;
        }
        elsif($proto eq proto_root) {

            # the substitution is documented here
            # https://mu2ewiki.fnal.gov/wiki/DataTransfer#Load_balancer_door
            $apn =~ s|^/pnfs/|xroot://fndcadoor.fnal.gov//pnfs/fnal.gov/usr/|
                or die "Error: root protocol requested"
                ." but a file pathname does not start with /pnfs: $apn\n";

            push @res, $apn;
        }
        else {
            die "Error: unknown protocol $proto\n";
        }
    }

    return @res;
}

#================================================================
# This sub figures out the desired job index and handles consistency
# checks on the relevant user inputs.

sub find_index {
    my ($jp, $opt) = @_;

    #----------------------------------------------------------------
    if(defined $opt->{'index'}) {
        die "Error: --index and --target are mutually exclusive\n"
            if defined $opt->{'target'};

        return $opt->{'index'};
    }

    #----------------------------------------------------------------
    if(defined $opt->{'target'}) {
        my $outfn = $opt->{'target'};

        my $fn = Mu2eFilename->parse($outfn);
        my $seq = $fn->sequencer();
        my $index = $jp->index_from_sequencer($seq);

        # Getting here means the sequencer belongs to this job set.  Let's
        # check that the full target file name matches what this job will
        # produce.

        my $out = $jp->job_outputs($index);
        foreach my $o (values %$out) {
            return $index if $o eq $outfn;
        }

        die "Error: file \"$outfn\" is not produced by any job in this job set.\n";
    }

    #----------------------------------------------------------------
    die "Error: either --index or --target must be specified.\n";
}

#================================================================
sub usage() {
    my $self = basename($0);

    my $inspec_opts = $sp->help_opts(' 'x11);
    chomp $inspec_opts;

    my $inspec_help = $sp->help_explanation(' 'x11);
    chomp $inspec_help;

    return <<EOF
Usage:
        $self \\
           --jobdef=cnf.tar \\
           {--index=<uint>|--target=<outfile-name>} \\
$inspec_opts
           [-h|--help]

This script prints out fcl config for a job with the given index in
the set of jobs defined by the jobdef.  Alternatively, one can specify
the *exact* name of of any of the of the output files produced by the
job instead of the numeric index using the --target option.

If the job needs any inputs, their location and access protocol must
be specified using the following options:

$inspec_help
           --help or -h   prints out this message and stops processing.
EOF
}

#================================================================
my %opt;

GetOptions(\%opt,
           'jobdef=s',
           'index=i',
           'target=s',
           $sp->option_defs(),
           'help',
    )
    or die "\nError processing command line options.\n";

if($opt{'help'}) {
    print usage();
    exit 0;
}

#================================================================
# Check the fundamentals

die "Error: --jobdef is required\n" unless $opt{'jobdef'};
my $pfname = $opt{'jobdef'};
die "Error: $pfname is not a file\n" unless -f $pfname;
die "Error: file $pfname is not readable\n" unless -r $pfname;
my $jp = Mu2eJobPars->new($pfname);

my $index = find_index($jp, \%opt);

die "Error: --index must be non-negative, got: $index\n" if $index < 0;

eval { $sp->initialize([$jp->input_datasets()], \%opt); };
die $@ . "\nTry the --help option.\n" if $@;

#================================================================
# is the index in range?

if(my $njobs = $jp->njobs()) {
    die "Zero based index $index is too large for njobs = $njobs\n"
        unless $index < $njobs;
}

#================================================================
my $fb =
    "#----------------------------------------------------------------\n".
    "# Code added by mu2ejobfcl for job index $index:\n";

#----------------------------------------------------------------
my $evid = $jp->job_event_settings($index);
my @evset = map { $_ . ': ' . $evid->{$_} } keys %$evid;
$fb .= join("\n", @evset) . "\n" if %$evid;

#----------------------------------------------------------------
my $inputs = $jp->job_inputs($index);
foreach my $k (keys  %$inputs) {
    my $v = $inputs->{$k}; # pay the price to avoid the fragile each(%hash)

    $fb .= "$k: [\n    "
        . join(",\n    ",
               doubleQuote(format_filenames($sp, $v)))
        . "\n]\n";

}

#----------------------------------------------------------------
my $outputs = $jp->job_outputs($index);
foreach my $k (keys  %$outputs) {
    my $outfile = $outputs->{$k};
    $fb .= "$k: ".  doubleQuote($outfile) . "\n";
}

#----------------------------------------------------------------
my $seed = $jp->job_seed($index);
if(%$seed) {
    my ($k, $v) = %$seed;
    $fb .= "$k: $v\n";
}

#----------------------------------------------------------------
$fb .=
    "# End code added by mu2ejobfcl:\n".
    "#----------------------------------------------------------------\n";

#================================================================
my $orig_fcl = $jp->get_tar_member(filename_fcl);
die "Error: could not extract '". filename_fcl ."' from '$pfname'\n"
    unless defined $orig_fcl;

print $orig_fcl;
print $fb;

#================================================================
exit(0);
